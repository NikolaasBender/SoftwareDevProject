https://meshstudio.io/blog/2017-11-06-serving-html-with-golang/

https://github.com/meshhq/golang-html-template-tutorial

FOR ROUTING IN GOLANG
https://github.com/gorilla/mux 

MAKING THE ROUTING INTO SOMETHING USEFUL
https://www.sohamkamani.com/blog/2017/09/13/how-to-build-a-web-application-in-golang/

MIGHT HELP WITH SUBMITTING DATA
https://stackoverflow.com/questions/41316794/golang-http-multiple-response-writeheader-calls

Sessions
https://gowebexamples.com/sessions/
http://www.gorillatoolkit.org/pkg/sessions
https://www.sohamkamani.com/blog/2018/02/25/golang-password-authentication-and-storage/
https://gist.github.com/danesparza/eb3a63ab55a7cd33923e 

Note: Don't store your key in your source code. Pass it via an
environmental variable, or flag (or both), and don't accidentally commit it
alongside your code. Ensure your key is sufficiently random - i.e. use Go's
crypto/rand or securecookie.GenerateRandomKey(32) and persist the result.
var store = sessions.NewCookieStore(os.Getenv("SESSION_KEY"))

Get a session. Get() always returns a session, even if empty.
    session, err := store.Get(r, "session-name")

Save it before we write to the response/return from the handler.
    session.Save(r, w)

fixing css maybe
https://stackoverflow.com/questions/36323232/golang-css-files-are-being-sent-with-content-type-text-plain


DONT SET ANY WRITE HEADERS!!!
w.WriteHeader(http.StatusOK)
THIS IS THE MARK OF THE BEAST!!!



delpoy on google
https://medium.com/google-cloud/building-a-go-web-app-from-scratch-to-deploying-on-google-cloud-part-1-building-a-simple-go-aee452a2e654
https://medium.com/google-cloud/building-a-go-web-app-from-scratch-to-deploying-on-google-cloud-part-2-deploying-our-go-app-on-a07285dfa6a9https://medium.com/google-cloud/building-a-go-web-app-from-scratch-to-deploying-on-google-cloud-part-2-deploying-our-go-app-on-a07285dfa6a9